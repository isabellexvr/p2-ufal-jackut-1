@startuml

skinparam classAttributeIconSize 0
skinparam classFontStyle bold
skinparam classFontSize 14
skinparam classBackgroundColor LightSkyBlue
skinparam classArrowColor DarkSlateGray
skinparam classBorderColor DarkSlateGray

class Facade {
  + createUser(login: String, password: String, name: String): void
  + abrirSessao(login: String, password: String): String
  + getAtributoUsuario(login: String, atributo: String): String
  + editarPerfil(sessionId: String, attribute: String, value: String): void
  + criarComunidade(sessionId: String, name: String, description: String): void
  + getCommunityDescription(communityName: String): String
  + getCommunityOwner(communityName: String): String
  + getCommunitiesByUser(login: String): ArrayList<String>
  + eraseSystem(): void
}

class Repository {
  - USERS_FILE: String
  - SESSIONS_FILE: String
  - COMMUNITIES_FILE: String
  - static instance: Repository
  - users: Map<String, User>
  - sessions: Map<String, Session>
  - communities: Map<String, Community>

  - Repository()
  + static getInstance(): Repository
  + isCommunityCreated(communityName: String): boolean
  + newCommunity(name: String, community: Community): void
  + getCommunityByName(communityName: String): Community
  + getCommunityDescription(communityName: String): String
  + getCommunityOwner(communityName: String): String
  + getCommunitiesByLogin(userLogin: String): ArrayList<String>
  + newSession(login: String, password: String): Session
  + getSession(sessionId: String): Session
  + getUserBySessionId(id: String): User
  + addUser(login: String, password: String, name: String): void
  + eraseEverything(): void
  + saveData(): void
  - saveToFile(fileName: String, data: Object): void
  - loadFromFile<T>(fileName: String, defaultValue: T): T
  + editProfile(session: Session, attribute: String, value: String): void
  - loadData(): void
  + getUser(login: String): User
  + deleteUser(login: String): void
}

class Session implements Serializable {
  - serialVersionUID: long
  - id: String
  - user: User

  + Session(id: String, user: User)
  + getId(): String
  + getUser(): User
}

class User implements Serializable {
  - serialVersionUID: long
  - login: String
  - password: String
  - name: String
  - attributes: Map<String, String>
  - messages: List<Message>
  - communityMessages: List<CommunityMessage>
  - communities: ArrayList<String>
  - friends: ArrayList<String>

  + User(login: String, password: String, name: String)
  + getLogin(): String
  + getPassword(): String
  + getName(): String
  + getAtributo(atributo: String): String
  + setAtributo(attribute: String, value: String): void
  + addMessage(message: Message): void
  + getMessages(): List<Message>
  + addCommunityMessage(message: CommunityMessage): void
  + getCommunityMessages(): List<CommunityMessage>
  + addCommunity(communityName: String): void
  + removeCommunity(communityName: String): void
  + getCommunities(): ArrayList<String>
  + addFriend(friendLogin: String): void
  + removeFriend(friendLogin: String): void
  + getFriends(): ArrayList<String>
}

class Community implements Serializable {
  - name: String
  - description: String
  - owner: User
  - members: ArrayList<User>

  + Community(name: String, description: String, owner: User)
  + getName(): String
  + getDescription(): String
  + getOwner(): String
  + getMembers(): ArrayList<String>
  + sendMessageToMembers(message: CommunityMessage): void
  + isAlreadyMember(user: User): Boolean
  + addMember(user: User): void
}

class Message implements Serializable {
  - serialVersionUID: long
  - senderSessionId: String
  - sender: User
  - receiverLogin: String
  - text: String

  + Message(senderSessionId: String, receiverLogin: String, text: String, sender: User)
  + getText(): String
  + getSenderSessionId(): String
  + getSender(): User
  + getReceiver(): String
}

class CommunityMessage implements Serializable {
  - serialVersionUID: long
  - sender: User
  - community: Community
  - message: String

  + CommunityMessage(sender: User, community: Community, message: String)
  + getSender(): User
  + getCommunity(): Community
  + getMessage(): String
}

package "Exceptions" {
  class UserNotFoundException
  class UserAlreadyExistsException
  class InvalidPasswordOrLoginException
  class EmptyAttributeException
  class CommunityDoesntExistException
}

' Relationships
Repository "1" *-- "*" User : contains
Repository "1" *-- "*" Session : contains
Repository "1" *-- "*" Community : contains
Session "1" --> "1" User : references
User "1" *-- "*" Message : receives
User "1" *-- "*" CommunityMessage : receives
Community "1" *-- "*" User : has members
CommunityMessage "1" --> "1" User : sent by
CommunityMessage "1" --> "1" Community : sent to
Message "1" --> "1" User : sent by

' Repository is a Singleton
Repository ..> Repository : <<creates>>

' Facade uses Repository
Facade --> Repository : uses

@enduml